/*=========================================================================================================
Program: A C Program about using structures to make a Library program
Created by: Shannen T. Nazareno
Date: 11/01/2022

Note: Issues can be found on the bottom part of the code.
===========================================================================================================*/

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

struct Library{
	char author[100];
	char bookName[50];
	int no_of_pages;
	int book_no;
};

int main()
{
	int records = 0, choice, count = 0;
	char searchBook[100];
	
	struct Library book[50];
	int n, i = 0, flag = 0;
	
	for(i=0; i<50; i++)
	{
		book[i].no_of_pages = -1;
		book[i].book_no = -1;
	}

	i = 0;
	
menu:
	printf ("\t\tMENU\n");
	printf ("----------------------------------------\n");
	printf ("[1] Add Book Details\n");
	printf ("[2] Display Book Details\n");
	printf ("[3] Display Book of Given Author\n");
	printf ("[4] Count Number of Books\n");
	printf ("[5] EXIT\n");
	printf ("----------------------------------------\n");

choice:
	printf ("Enter choice: ");
	scanf ("%d", &choice);
	
	
	if (!(isdigit(choice)) && choice>=6)
	{
		printf ("\n\aInvalid input. Try again.\n\n");
		goto choice;
	}
	
	if (choice!=1 && choice!=5)
	{
		if (records==0)
		{
				printf ("NO RECORDS WERE FOUND YET. Please add books by choosing [1].\n\n");
				goto choice;
		}
	}
	
	switch (choice)
	{
		case 1:
			printf ("\n\nYou entered 1.\n\n");
			printf ("How many records would you want to add? ");
			scanf ("%d", &records);
			
			printf ("-----------------------------------");
			printf ("\n\tAdd details of %d Book/s: ", records);
			printf ("\n-----------------------------------\n");
			
			for(i=0; i<records; i++)
			{
				printf ("\t\t[%d]\n", i+1);
				printf ("Enter Book Number: ");
				scanf ("%d", &book[i+count].book_no);
				printf ("Book Name: ");
				scanf (" %[^\n]s", book[i+count].bookName);
				printf ("Enter Author: ");
				scanf (" %[^\n]s", book[count+i].author);
				printf ("Enter Number of Pages: ");
				scanf ("%d", &book[i+count].no_of_pages);
				printf ("--------------------------\n");
				
				count++;
				
			}; break;
		
		case 2: 
			printf ("\n\nYou entered 2.\n\n");
			
			printf ("\t\t\t\t\t\tDetails of All Book/s\n");
			printf ("-------------------------------------------------------------------------------------------------------------\n");
			printf ("\t\tBook No.\t\tBook Name\t\tAuthor Name\t\tNo. of Pages\n");
			printf ("-------------------------------------------------------------------------------------------------------------\n");
			
			for(i=0; i<count; i++)
			{
				printf ("%25d %25s %25s %25d\n", book[i].book_no, book[i].bookName, book[i].author, book[i].no_of_pages);
			}
			printf ("-------------------------------------------------------------------------------------------------------------\n"); break;
		
		case 3:
			printf ("\n\nYou entered 3.\n\n");
			printf ("\n\nEnter Author Name: ");
			scanf (" %[^\n]s", searchBook);
			
			for(i=0; i<count; i++)
			{
				if((strcmp(searchBook, book[i].author))==0)
				{
					printf ("\t\tBOOK FOUND\n");
					printf ("-----------------------------\n");
					printf ("%s\n", book[i].bookName);
					flag = 1;
				}
				
				if(flag==1)
				{
					break;
				}
			}
			
			if (flag==0)
			{
				printf ("\n\n\t\t\t\tBOOK CAN'T BE FOUND.");
			}
			printf ("\n\n"); break;
		
		case 4:
			printf ("\n\nYou entered 4.\n\n");
			printf ("Total Number of Books in the Library: %d\n\n", count); break;
			
		case 5:
			printf ("\n\t\t\t\t\t\t\t\t\t-Exited the library-");
			exit(1);
			break;
	}
	
	flag = 0;
	
	printf ("\n\t\t\t\t\t\t\t\t\tWhat would you like to do now? \n");
	goto menu;
	
	return 0;
}


/*
	THINGS THAT NEEDED TO BE FIXED/MODIFIED:
	
	1. Upon entering the record number > 1, the last input if displayed, would show nothing or unwanted output.
	2. User can find books even if he/she entered the first name (for example) of an author
	3. Invalid outputs should prompt the user to go back and enter a valid one
	4. Books should be dynamically allocated
	5. User can delete a book

*/
